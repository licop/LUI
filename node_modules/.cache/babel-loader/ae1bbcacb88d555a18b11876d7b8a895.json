{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/licop/Documents/GitHub/LUI/src/components/Upload/upload.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from 'react';\nimport axios from 'axios';\nimport Button from '../Button/button';\n\nconst Upload = props => {\n  _s();\n\n  const {\n    action,\n    onProgress,\n    onSuccess,\n    onError,\n    beforeUpload\n  } = props;\n  const fileInput = useRef(null);\n\n  const handleClick = () => {\n    if (fileInput.current) {\n      fileInput.current.click();\n    }\n  };\n\n  const uploadFiles = files => {\n    let postFiles = Array.from(files);\n    postFiles.forEach(file => {\n      if (!beforeUpload) {\n        post(file);\n      } else {\n        const result = beforeUpload(file);\n\n        if (result && result instanceof Promise) {\n          result.then(processFile => {\n            post(processFile);\n          });\n        } else if (result !== false) {\n          post(file);\n        }\n      }\n    });\n  };\n\n  const post = file => {\n    const formData = new FormData();\n    formData.append(file.name, file);\n    axios.post(action, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      },\n      onUploadProgress: e => {\n        let percentage = Math.round(e.load * 100 / e.total) || 0;\n\n        if (percentage < 100) {\n          if (onProgress) {\n            onProgress(percentage, file);\n          }\n        }\n      }\n    }).then(resp => {\n      if (onSuccess) {\n        onSuccess(resp.data, file);\n      }\n    }).catch(err => {\n      console.error(err);\n\n      if (onError) {\n        onError(err, file);\n      }\n    });\n  };\n\n  const handleChange = e => {\n    const files = e.target.files;\n\n    if (!files) {\n      return;\n    }\n\n    uploadFiles(files);\n\n    if (fileInput.current) {\n      fileInput.current.value = '';\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"lui-uplaod-component\",\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      btnType: \"primary\",\n      onClick: handleClick,\n      children: \"Upload File\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"lui-file-input\",\n      style: {\n        display: 'none'\n      },\n      onChange: handleChange,\n      type: \"file\",\n      ref: fileInput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 12\n  }, this);\n};\n\n_s(Upload, \"09+ds+3z18rIiMAYMZa/YbTXEjU=\");\n\n_c = Upload;\nexport default Upload;\n\nvar _c;\n\n$RefreshReg$(_c, \"Upload\");","map":{"version":3,"sources":["/Users/licop/Documents/GitHub/LUI/src/components/Upload/upload.tsx"],"names":["React","useRef","axios","Button","Upload","props","action","onProgress","onSuccess","onError","beforeUpload","fileInput","handleClick","current","click","uploadFiles","files","postFiles","Array","from","forEach","file","post","result","Promise","then","processFile","formData","FormData","append","name","headers","onUploadProgress","e","percentage","Math","round","load","total","resp","data","catch","err","console","error","handleChange","target","value","display"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useRef, ChangeEvent} from 'react';\nimport axios from 'axios';\nimport Button from '../Button/button';\nimport { Primary } from '../../stories/Button.stories';\n\nexport interface UploadProps {\n    action: string;\n    beforeUpload?: (file: File) => boolean | Promise<File>;\n    onProgress?: (percentage: number, file: File) => void;\n    onSuccess?: (data: any, file: File) => void;\n    onError?: (err: any, file: File) => void;\n    onChnage?: (file: File) => void\n}\n\nconst Upload: React.FC<UploadProps> = (props) => {\n    const {\n        action,\n        onProgress,\n        onSuccess,\n        onError,\n        beforeUpload\n    } = props;\n    const fileInput = useRef<HTMLInputElement>(null);\n    const handleClick = () => {\n        if(fileInput.current) {\n            fileInput.current.click()\n        } \n    }\n    \n    const uploadFiles = (files: FileList) => {\n        let postFiles = Array.from(files);\n        postFiles.forEach(file => {\n            if(!beforeUpload) {\n                post(file)\n            } else {\n                const result = beforeUpload(file);\n                if(result && result instanceof Promise) {\n                    result.then(processFile => {\n                        post(processFile)\n                    }) \n                } else if(result !== false) {\n                    post(file);\n                }\n            }\n        })\n    }\n    \n    const post = (file: File) => {\n        const formData = new FormData();\n        formData.append(file.name, file);\n        axios.post(action, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data' \n            },\n            onUploadProgress: (e) => {\n                let percentage = Math.round((e.load * 100) / e.total) || 0;\n                if(percentage < 100) {\n                    if(onProgress) {\n                        onProgress(percentage, file);\n                    }\n                }\n            }\n        }).then(resp => {\n            if(onSuccess) {\n                onSuccess(resp.data, file);\n            }\n        }).catch(err => {\n            console.error(err);\n            if(onError) {\n                onError(err, file);\n            }\n        })\n    }\n\n    const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n        const files = e.target.files;\n        if(!files) {\n            return;\n        }\n        uploadFiles(files);\n        if(fileInput.current) {\n            fileInput.current.value = ''\n        }\n    }\n\n    return <div className=\"lui-uplaod-component\">\n        <Button \n            btnType=\"primary\"\n            onClick={handleClick}\n        > \n            Upload File\n        </Button>\n        <input\n            className=\"lui-file-input\"\n            style={{display: 'none'}}\n            onChange={handleChange}\n            type='file'\n            ref={fileInput}\n        ></input>\n    </div>\n}\n\nexport default Upload;\n"]},"metadata":{},"sourceType":"module"}