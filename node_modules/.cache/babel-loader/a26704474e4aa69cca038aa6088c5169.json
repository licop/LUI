{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/licop/Documents/GitHub/LUI/src/components/AutoComplete/AutoComplete.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport classNames from 'classnames';\nimport Input from '../Input/Input';\nimport Icon from '../Icon/Icon';\nimport useDebounce from '../../hooks/useDebounce';\nimport useClickOutside from '../../hooks/useClickOutside';\nimport Transition from '../Transition/Transition';\n\n/**\n * 自动补全Input\n */\nconst AutoComplete = props => {\n  _s();\n\n  const {\n    fetchSuggestions,\n    onSelect,\n    value,\n    renderOption,\n    ...restProps\n  } = props;\n  const [isLoading, setLoading] = useState(false);\n  const [inputValue, setInputValue] = useState(value);\n  const [suggestions, setSuggestions] = useState([]);\n  const [highlightIndex, setHighlightIndex] = useState(-1);\n  const [showDropdown, setShowDropdown] = useState(false);\n  const debounceValue = useDebounce(inputValue, 500);\n  const triggerSearch = useRef(false);\n  const componentRef = useRef(null);\n\n  const handleSelect = item => {\n    setInputValue(item.value);\n    setShowDropdown(false);\n\n    if (onSelect) {\n      onSelect(item);\n    }\n\n    triggerSearch.current = false;\n  };\n\n  useClickOutside(componentRef, () => {\n    setSuggestions([]);\n  });\n  useEffect(() => {\n    if (debounceValue && triggerSearch.current) {\n      const results = fetchSuggestions(debounceValue);\n\n      if (results instanceof Promise) {\n        setLoading(true);\n        results.then(data => {\n          setLoading(false);\n          setSuggestions(data);\n\n          if (data.length > 0) {\n            setShowDropdown(true);\n          }\n        });\n      } else {\n        setSuggestions(results);\n\n        if (results.length > 0) {\n          setShowDropdown(true);\n        }\n      }\n    } else {\n      setShowDropdown(false);\n    }\n\n    setHighlightIndex(-1);\n  }, [debounceValue]);\n\n  const handleChange = e => {\n    const value = e.target.value.trim();\n    setInputValue(value);\n    triggerSearch.current = true;\n  };\n\n  const highlight = index => {\n    if (index < 0) index = 0;\n\n    if (index >= suggestions.length) {\n      index = suggestions.length - 1;\n    }\n\n    setHighlightIndex(index);\n  };\n\n  const handleKeyDown = e => {\n    switch (e.keyCode) {\n      case 13:\n        if (suggestions[highlightIndex]) {\n          handleSelect(suggestions[highlightIndex]);\n        }\n\n        break;\n\n      case 38:\n        highlight(highlightIndex - 1);\n        break;\n\n      case 40:\n        highlight(highlightIndex + 1);\n        break;\n\n      case 27:\n        setShowDropdown(false);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const generateDropdown = () => {\n    return /*#__PURE__*/_jsxDEV(Transition, {\n      in: showDropdown || isLoading,\n      animation: \"zoom-in-top\",\n      timeout: 300,\n      onExited: () => {\n        setSuggestions([]);\n      },\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"lui-suggestion-list\",\n        children: [isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"suggstions-loading-icon\",\n          children: /*#__PURE__*/_jsxDEV(Icon, {\n            icon: \"spinner\",\n            spin: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 25\n        }, this), suggestions.map((item, index) => {\n          const cnames = classNames('suggestion-item', {\n            'is-active': index === highlightIndex\n          });\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            className: cnames,\n            onClick: () => handleSelect(item),\n            children: renderTemplate(item)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 32\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this);\n  };\n\n  const renderTemplate = item => {\n    return renderOption ? renderOption(item) : item.value;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"lui-auto-complete\",\n    ref: componentRef,\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      value: inputValue,\n      onChange: handleChange,\n      onKeyDown: handleKeyDown,\n      ...restProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this), generateDropdown()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AutoComplete, \"SrBaBpCt00xXpTYtVuIO6jRKQ24=\", false, function () {\n  return [useDebounce, useClickOutside];\n});\n\n_c = AutoComplete;\nexport default AutoComplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"AutoComplete\");","map":{"version":3,"sources":["/Users/licop/Documents/GitHub/LUI/src/components/AutoComplete/AutoComplete.tsx"],"names":["React","useState","useEffect","useRef","classNames","Input","Icon","useDebounce","useClickOutside","Transition","AutoComplete","props","fetchSuggestions","onSelect","value","renderOption","restProps","isLoading","setLoading","inputValue","setInputValue","suggestions","setSuggestions","highlightIndex","setHighlightIndex","showDropdown","setShowDropdown","debounceValue","triggerSearch","componentRef","handleSelect","item","current","results","Promise","then","data","length","handleChange","e","target","trim","highlight","index","handleKeyDown","keyCode","generateDropdown","map","cnames","renderTemplate"],"mappings":"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","sourcesContent":["import React, { FC, useState, ChangeEvent, KeyboardEvent, ReactElement, useEffect, useRef } from 'react';\nimport classNames from 'classnames';\nimport Input, { InputProps } from '../Input/Input';\nimport Icon from '../Icon/Icon';\nimport useDebounce from '../../hooks/useDebounce'\nimport useClickOutside from '../../hooks/useClickOutside';\nimport Transition from '../Transition/Transition';\n\ninterface DataSourceObject {\n    value: string\n}\nexport type DataSourceType<T = {}> = T & DataSourceObject;\n\nexport interface AutoCompleteProps extends Omit<InputProps, 'onSelect'> {\n    /**\n     * 获取数据函数，可以返回数组或者Promise对象\n     */\n    fetchSuggestions: (str: string) => DataSourceType[] | Promise<DataSourceType[]>,\n    onSelect?: (str: DataSourceType) => void,\n    renderOption?: (str: any) => ReactElement | string\n}\n/**\n * 自动补全Input\n */\nconst AutoComplete: FC<AutoCompleteProps> = (props) => {\n    const {\n        fetchSuggestions,\n        onSelect,\n        value,\n        renderOption,\n        ...restProps\n    } = props;\n    const [isLoading, setLoading] = useState(false)\n    const [inputValue,  setInputValue] = useState(value as string);\n    const [suggestions, setSuggestions] = useState<DataSourceType[]>([]);\n    const [highlightIndex, setHighlightIndex] = useState(-1)\n    const [ showDropdown, setShowDropdown] = useState(false)\n    const debounceValue = useDebounce(inputValue, 500);\n    const triggerSearch = useRef(false);\n    const componentRef = useRef<HTMLDivElement>(null);\n\n    const handleSelect = (item: DataSourceType) => {\n        setInputValue(item.value)\n        setShowDropdown(false)\n        if (onSelect) {\n          onSelect(item)\n        }\n        triggerSearch.current = false;\n    }\n    useClickOutside(componentRef, () => {setSuggestions([])});\n    useEffect(() => {\n        if(debounceValue && triggerSearch.current) {\n            const results = fetchSuggestions(debounceValue);\n            if(results instanceof Promise) {\n                setLoading(true);\n                results.then(data => {\n                    setLoading(false);\n                    setSuggestions(data);\n\n                    if (data.length > 0) {\n                        setShowDropdown(true)\n                    }\n                })\n            } else {\n                setSuggestions(results);\n                if (results.length > 0) {\n                    setShowDropdown(true)\n                }\n            }\n        } else {\n            setShowDropdown(false)\n        }\n        setHighlightIndex(-1);\n    }, [debounceValue])\n\n    const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n        const value = e.target.value.trim();\n        setInputValue(value);\n        triggerSearch.current = true;\n    }\n    \n    const highlight = (index: number) => {\n        if(index < 0) index = 0;\n        if(index >= suggestions.length) {\n            index = suggestions.length - 1;\n        }\n        setHighlightIndex(index);\n    }\n\n    const handleKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {\n        switch(e.keyCode) {\n            case 13: \n                if(suggestions[highlightIndex]) {\n                    handleSelect(suggestions[highlightIndex])\n                }\n                break;\n            case 38:\n                highlight(highlightIndex - 1)\n                break;\n            case 40: \n                highlight(highlightIndex + 1)\n                break;\n            case 27:\n                setShowDropdown(false)\n                break;\n            default:\n                break;\n\n        }\n    }\n\n    const generateDropdown = () => {\n        return (\n            <Transition\n                in={showDropdown || isLoading}\n                animation=\"zoom-in-top\"\n                timeout={300}\n                onExited={() => {setSuggestions([])}}\n            >\n                <ul className=\"lui-suggestion-list\">\n                    { isLoading &&\n                        <div className=\"suggstions-loading-icon\">\n                            <Icon icon=\"spinner\" spin/>\n                        </div>\n                    }\n                    {suggestions.map((item, index) => {\n                        const cnames = classNames('suggestion-item', {\n                            'is-active': index === highlightIndex\n                        })\n                        return <li key={index} className={cnames} onClick={() => handleSelect(item)}>\n                            {renderTemplate(item)}\n                        </li>\n                    })}\n                </ul>\n            </Transition> \n        )\n    }\n\n    const renderTemplate = (item: any) => {\n        return renderOption ? renderOption(item) : item.value;\n    }\n\n    return (\n        <div className=\"lui-auto-complete\" ref={componentRef}>\n            <Input \n                value={inputValue}\n                onChange={handleChange}\n                onKeyDown={handleKeyDown}\n                {...restProps}\n            />\n            \n            {generateDropdown()}\n        </div>\n    )\n}\n\nexport default AutoComplete;\n"]},"metadata":{},"sourceType":"module"}