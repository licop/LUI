{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/licop/Documents/GitHub/LUI/src/components/Upload/upload.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, Children } from 'react';\nimport axios from 'axios';\nimport UploadList from './uploadList';\n\nconst Upload = props => {\n  _s();\n\n  const {\n    action,\n    defaultFileList,\n    onProgress,\n    onSuccess,\n    onError,\n    beforeUpload,\n    onChange,\n    onRemove,\n    withCredentials,\n    headers,\n    data,\n    name,\n    accept,\n    multiple\n  } = props;\n  const fileInput = useRef(null);\n  const [fileList, setFileList] = useState(defaultFileList || []);\n\n  const uploadFileList = (uploadFile, uploadObj) => {\n    setFileList(prevList => {\n      return prevList.map(file => {\n        if (file.uid === uploadFile.uid) {\n          return { ...file,\n            ...uploadObj\n          };\n        } else {\n          return file;\n        }\n      });\n    });\n  };\n\n  const handleClick = () => {\n    if (fileInput.current) {\n      fileInput.current.click();\n    }\n  };\n\n  const uploadFiles = files => {\n    let postFiles = Array.from(files);\n    postFiles.forEach(file => {\n      if (!beforeUpload) {\n        post(file);\n      } else {\n        const result = beforeUpload(file);\n\n        if (result && result instanceof Promise) {\n          result.then(processFile => {\n            post(processFile);\n          });\n        } else if (result !== false) {\n          post(file);\n        }\n      }\n    });\n  };\n\n  const post = file => {\n    const formData = new FormData();\n    let _file = {\n      uid: Date.now() + 'upload-file',\n      status: 'ready',\n      name: file.name,\n      size: file.size,\n      percent: 0,\n      raw: file\n    };\n    setFileList(prevList => {\n      return [_file, ...prevList];\n    });\n    formData.append(name || 'file', file);\n\n    if (data) {\n      Object.keys(data).forEach(key => {\n        formData.append(key, data[key]);\n      });\n    }\n\n    axios.post(action, formData, {\n      headers: { ...headers,\n        'Content-Type': 'multipart/form-data'\n      },\n      withCredentials,\n      onUploadProgress: e => {\n        let percentage = Math.round(e.loaded * 100 / e.total) || 0;\n\n        if (percentage < 100) {\n          uploadFileList(_file, {\n            percent: percentage,\n            status: 'uploading'\n          });\n\n          if (onProgress) {\n            onProgress(percentage, file);\n          }\n        }\n      }\n    }).then(resp => {\n      uploadFileList(_file, {\n        status: 'success',\n        response: resp.data\n      });\n\n      if (onSuccess) {\n        onSuccess(resp.data, file);\n      }\n\n      if (onChange) {\n        onChange(file);\n      }\n    }).catch(err => {\n      uploadFileList(_file, {\n        status: 'error',\n        error: err\n      });\n\n      if (onError) {\n        onError(err, file);\n      }\n\n      if (onChange) {\n        onChange(file);\n      }\n    });\n  };\n\n  console.log(fileList, 105);\n\n  const handleChange = e => {\n    const files = e.target.files;\n\n    if (!files) {\n      return;\n    }\n\n    uploadFiles(files);\n\n    if (fileInput.current) {\n      fileInput.current.value = '';\n    }\n  };\n\n  const handleRemove = file => {\n    setFileList(prevList => {\n      return prevList.filter(item => item.uid !== file.uid);\n    });\n\n    if (onRemove) {\n      onRemove(file);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"lui-upload-component\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"lui-upload-input\",\n      children: [Children, /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"lui-file-input\",\n        style: {\n          display: 'none'\n        },\n        onChange: handleChange,\n        type: \"file\",\n        ref: fileInput,\n        accept: accept,\n        multiple: multiple\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(UploadList, {\n      fileList: fileList,\n      onRemove: handleRemove\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 12\n  }, this);\n};\n\n_s(Upload, \"WyCgw5iJ445fbzvzDwsZLf/IHDo=\");\n\n_c = Upload;\nexport default Upload;\n\nvar _c;\n\n$RefreshReg$(_c, \"Upload\");","map":{"version":3,"sources":["/Users/licop/Documents/GitHub/LUI/src/components/Upload/upload.tsx"],"names":["React","useState","useRef","Children","axios","UploadList","Upload","props","action","defaultFileList","onProgress","onSuccess","onError","beforeUpload","onChange","onRemove","withCredentials","headers","data","name","accept","multiple","fileInput","fileList","setFileList","uploadFileList","uploadFile","uploadObj","prevList","map","file","uid","handleClick","current","click","uploadFiles","files","postFiles","Array","from","forEach","post","result","Promise","then","processFile","formData","FormData","_file","Date","now","status","size","percent","raw","append","Object","keys","key","onUploadProgress","e","percentage","Math","round","loaded","total","resp","response","catch","err","error","console","log","handleChange","target","value","handleRemove","filter","item","display"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useRef, ChangeEvent, Children} from 'react';\nimport axios from 'axios';\nimport Button from '../Button/button';\nimport UploadList from './uploadList'\nimport { access } from 'fs';\n\ntype UploadFileStatus = 'ready' | 'uploading' | 'success' | 'error';\n\nexport interface UploadFile {\n    uid: string;\n    size: number;\n    name: string;\n    status?: UploadFileStatus;\n    percent?: number;\n    raw?: File;\n    response?: any;\n    error?: any;  \n}\n\nexport interface UploadProps {\n    action: string;\n    defaultFileList?: UploadFile[];\n    beforeUpload?: (file: File) => boolean | Promise<File>;\n    onProgress?: (percentage: number, file: File) => void;\n    onSuccess?: (data: any, file: File) => void;\n    onError?: (err: any, file: File) => void;\n    onChange?: (file: File) => void;\n    onRemove?: (file: UploadFile) => void;\n    withCredentials?: boolean;\n    headers?: {[key: string]: any};\n    name?: string,\n    data?: {[key: string]: any};\n    accept?: string\n    multiple?: boolean\n}\nconst Upload: React.FC<UploadProps> = (props) => {\n    const {\n        action,\n        defaultFileList,\n        onProgress,\n        onSuccess,\n        onError,\n        beforeUpload,\n        onChange,\n        onRemove,\n        withCredentials,\n        headers,\n        data,\n        name,\n        accept,\n        multiple\n    } = props;\n    const fileInput = useRef<HTMLInputElement>(null);\n    const [fileList, setFileList] = useState<UploadFile[]>(defaultFileList || []);\n\n    const uploadFileList = (uploadFile: UploadFile, uploadObj: Partial<UploadFile>) => {\n        setFileList(prevList => {\n            return prevList.map(file => {\n                if(file.uid === uploadFile.uid) {\n                    return {...file, ...uploadObj}\n                } else {\n                    return file;\n                }\n            })\n        })\n    }\n    \n    const handleClick = () => {\n        if(fileInput.current) {\n            fileInput.current.click()\n        } \n    }\n    \n    const uploadFiles = (files: FileList) => {\n        let postFiles = Array.from(files);\n        postFiles.forEach(file => {\n            if(!beforeUpload) {\n                post(file)\n            } else {\n                const result = beforeUpload(file);\n                if(result && result instanceof Promise) {\n                    result.then(processFile => {\n                        post(processFile)\n                    }) \n                } else if(result !== false) {\n                    post(file);\n                }\n            }\n        })\n    }\n    \n    const post = (file: File) => {\n        const formData = new FormData();\n        let _file: UploadFile = {\n            uid: Date.now() + 'upload-file',\n            status: 'ready',\n            name: file.name,\n            size: file.size,\n            percent: 0,\n            raw: file\n        }\n        setFileList(prevList => {\n            return [_file, ...prevList]\n        })\n        formData.append(name || 'file', file);\n        if(data) {\n            Object.keys(data).forEach(key => {\n                formData.append(key, data[key]);\n            })\n        }\n        axios.post(action, formData, {\n            headers: {\n                ...headers,\n                'Content-Type': 'multipart/form-data' \n            },\n            withCredentials,\n            onUploadProgress: (e) => {\n                let percentage = Math.round((e.loaded * 100) / e.total) || 0;\n                if(percentage < 100 ) {\n                    uploadFileList(_file, {percent: percentage, status: 'uploading'});\n                    if(onProgress) {\n                        onProgress(percentage, file);\n                    }\n                }\n            }\n        }).then(resp => {\n            uploadFileList(_file, {status: 'success', response: resp.data})\n            \n            if(onSuccess) {\n                onSuccess(resp.data, file);\n            }\n            if(onChange) {\n                onChange(file);\n            }\n        }).catch(err => {\n            uploadFileList(_file, {status: 'error', error: err})\n            if(onError) {\n                onError(err, file);\n            }\n            if(onChange) {\n                onChange(file);\n            }\n        })\n\n    }\n    console.log(fileList, 105);\n    const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n        const files = e.target.files;\n        if(!files) {\n            return;\n        }\n        uploadFiles(files);\n        if(fileInput.current) {\n            fileInput.current.value = ''\n        }\n    }\n    const handleRemove = (file: UploadFile) => {\n        setFileList(prevList => {\n            return prevList.filter(item => item.uid !== file.uid)\n        });\n        if(onRemove) {\n            onRemove(file);\n        }\n    }\n\n    return <div className=\"lui-upload-component\">\n        <div className=\"lui-upload-input\">\n            {Children}\n            <input\n                className=\"lui-file-input\"\n                style={{display: 'none'}}\n                onChange={handleChange}\n                type='file'\n                ref={fileInput}\n                accept={accept}\n                multiple={multiple}\n            />\n        </div>\n        \n        <UploadList \n            fileList={fileList}\n            onRemove={handleRemove}\n        />\n    </div>\n}\n\n\n\nexport default Upload;\n"]},"metadata":{},"sourceType":"module"}