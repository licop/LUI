{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/licop/Documents/GitHub/LUI/src/components/Upload/upload.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from 'react';\nimport axios from 'axios';\nimport Button from '../Button/button';\n\nconst Upload = props => {\n  _s();\n\n  const {\n    action,\n    onProgress,\n    onSuccess,\n    onError,\n    beforeUpload,\n    onChange\n  } = props;\n  const fileInput = useRef(null);\n  const [fileList, setFileList] = useState([]);\n\n  const handleClick = () => {\n    if (fileInput.current) {\n      fileInput.current.click();\n    }\n  };\n\n  const uploadFiles = files => {\n    let postFiles = Array.from(files);\n    postFiles.forEach(file => {\n      if (!beforeUpload) {\n        post(file);\n      } else {\n        const result = beforeUpload(file);\n\n        if (result && result instanceof Promise) {\n          result.then(processFile => {\n            post(processFile);\n          });\n        } else if (result !== false) {\n          post(file);\n        }\n      }\n    });\n  };\n\n  const post = file => {\n    const formData = new FormData();\n    let _file = {\n      uid: Date.now() + 'upload-file',\n      status: 'ready',\n      name: file.name,\n      size: file.size,\n      percent: 0,\n      raw: file\n    };\n    formData.append(file.name, file);\n    axios.post(action, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      },\n      onUploadProgress: e => {\n        let percentage = Math.round(e.load * 100 / e.total) || 0;\n\n        if (percentage < 100) {\n          if (onProgress) {\n            onProgress(percentage, file);\n          }\n        }\n      }\n    }).then(resp => {\n      if (onSuccess) {\n        onSuccess(resp.data, file);\n      }\n\n      if (onChange) {\n        onChange(file);\n      }\n    }).catch(err => {\n      console.error(err);\n\n      if (onError) {\n        onError(err, file);\n      }\n\n      if (onChange) {\n        onChange(file);\n      }\n    });\n  };\n\n  const handleChange = e => {\n    const files = e.target.files;\n\n    if (!files) {\n      return;\n    }\n\n    uploadFiles(files);\n\n    if (fileInput.current) {\n      fileInput.current.value = '';\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"lui-uplaod-component\",\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      btnType: \"primary\",\n      onClick: handleClick,\n      children: \"Upload File\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"lui-file-input\",\n      style: {\n        display: 'none'\n      },\n      onChange: handleChange,\n      type: \"file\",\n      ref: fileInput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 12\n  }, this);\n};\n\n_s(Upload, \"w+pE8zYExojZSUztDuAZKLEk4fo=\");\n\n_c = Upload;\nexport default Upload;\n\nvar _c;\n\n$RefreshReg$(_c, \"Upload\");","map":{"version":3,"sources":["/Users/licop/Documents/GitHub/LUI/src/components/Upload/upload.tsx"],"names":["React","useState","useRef","axios","Button","Upload","props","action","onProgress","onSuccess","onError","beforeUpload","onChange","fileInput","fileList","setFileList","handleClick","current","click","uploadFiles","files","postFiles","Array","from","forEach","file","post","result","Promise","then","processFile","formData","FormData","_file","uid","Date","now","status","name","size","percent","raw","append","headers","onUploadProgress","e","percentage","Math","round","load","total","resp","data","catch","err","console","error","handleChange","target","value","display"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useRef, ChangeEvent} from 'react';\nimport axios from 'axios';\nimport Button from '../Button/button';\n\ntype UploadFileStatus = 'ready' | 'uploading' | 'success' | 'error';\n\nexport interface UploadFile {\n    uid: string;\n    size: number;\n    name: string;\n    status?: UploadFileStatus;\n    percent?: number;\n    raw?: File;\n    response?: any;\n    error?: any;  \n}\n\nexport interface UploadProps {\n    action: string;\n    beforeUpload?: (file: File) => boolean | Promise<File>;\n    onProgress?: (percentage: number, file: File) => void;\n    onSuccess?: (data: any, file: File) => void;\n    onError?: (err: any, file: File) => void;\n    onChange?: (file: File) => void\n}\n\nconst Upload: React.FC<UploadProps> = (props) => {\n    const {\n        action,\n        onProgress,\n        onSuccess,\n        onError,\n        beforeUpload,\n        onChange\n    } = props;\n    const fileInput = useRef<HTMLInputElement>(null);\n    const [fileList, setFileList] = useState<UploadFile[]>([]);\n\n    const handleClick = () => {\n        if(fileInput.current) {\n            fileInput.current.click()\n        } \n    }\n    \n    const uploadFiles = (files: FileList) => {\n        let postFiles = Array.from(files);\n        postFiles.forEach(file => {\n            if(!beforeUpload) {\n                post(file)\n            } else {\n                const result = beforeUpload(file);\n                if(result && result instanceof Promise) {\n                    result.then(processFile => {\n                        post(processFile)\n                    }) \n                } else if(result !== false) {\n                    post(file);\n                }\n            }\n        })\n    }\n    \n    const post = (file: File) => {\n        const formData = new FormData();\n        let _file: UploadFile = {\n            uid: Date.now() + 'upload-file',\n            status: 'ready',\n            name: file.name,\n            size: file.size,\n            percent: 0,\n            raw: file\n        }\n\n        formData.append(file.name, file);\n        axios.post(action, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data' \n            },\n            onUploadProgress: (e) => {\n                let percentage = Math.round((e.load * 100) / e.total) || 0;\n                if(percentage < 100) {\n                    if(onProgress) {\n                        onProgress(percentage, file);\n                    }\n                }\n            }\n        }).then(resp => {\n            if(onSuccess) {\n                onSuccess(resp.data, file);\n            }\n            if(onChange) {\n                onChange(file);\n            }\n        }).catch(err => {\n            console.error(err);\n            if(onError) {\n                onError(err, file);\n            }\n            if(onChange) {\n                onChange(file);\n            }\n        })\n    }\n\n    const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n        const files = e.target.files;\n        if(!files) {\n            return;\n        }\n        uploadFiles(files);\n        if(fileInput.current) {\n            fileInput.current.value = ''\n        }\n    }\n\n    return <div className=\"lui-uplaod-component\">\n        <Button \n            btnType=\"primary\"\n            onClick={handleClick}\n        > \n            Upload File\n        </Button>\n        <input\n            className=\"lui-file-input\"\n            style={{display: 'none'}}\n            onChange={handleChange}\n            type='file'\n            ref={fileInput}\n        ></input>\n    </div>\n}\n\nexport default Upload;\n"]},"metadata":{},"sourceType":"module"}