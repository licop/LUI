{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/licop/Documents/GitHub/LUI/src/components/AutoComplete/autoCompele.stories.tsx\";\n\n/* eslint-disable */\n// @ts-nocheck\n// @ts-ignore\nvar __STORY__ = \"import React from 'react'\\nimport { storiesOf } from '@storybook/react'\\nimport { action } from '@storybook/addon-actions'\\nimport AutoComplete from './autoComplete'\\ninterface LakerPlayerProps {\\n  value: string;\\n  number: number;\\n}\\ninterface GithubUserProps {\\n  login: string;\\n  url: string;\\n  avatar_url: string;\\n}\\nconst SimpleComplete = () => {\\n  const lakers = ['bradley', 'pope', 'caruso', 'cook', 'cousins',\\n  'james', 'AD', 'green', 'howard', 'kuzma', 'McGee', 'rando']\\n  // const lakersWithNumber = [\\n  //   {value: 'bradley', number: 11},\\n  //   {value: 'pope', number: 1},\\n  //   {value: 'caruso', number: 4},\\n  //   {value: 'cook', number: 2},\\n  //   {value: 'cousins', number: 15},\\n  //   {value: 'james', number: 23},\\n  //   {value: 'AD', number: 3},\\n  //   {value: 'green', number: 14},\\n  //   {value: 'howard', number: 39},\\n  //   {value: 'kuzma', number: 0},\\n  // ]\\n  // const handleFetch = (query: string) => {\\n  //   return lakers.filter(name => name.includes(query)).map(name => ({value: name}))\\n  // }\\n  // const handleFetch = (query: string) => {\\n  //   return lakersWithNumber.filter(player => player.value.includes(query))\\n  // }\\n  const handleFetch = (query: string) => {\\n    // return fetch(`https://api.github.com/search/users?q=${query}`)\\n    //   .then(res => res.json())\\n    //   .then(({ items }) => {\\n    //     console.log(items)\\n    //     return items.slice(0, 10).map((item: any) => ({ value: item.login, ...item}))\\n    //   })\\n    return lakers.filter(item => {return item.includes(query)});\\n  }\\n\\n  // const renderOption = (item: DataSourceType) => {\\n  //   const itemWithGithub = item as DataSourceType<GithubUserProps>\\n  //   return (\\n  //     <>\\n  //       <h2>Name: {itemWithGithub.value}</h2>\\n  //       <p>url: {itemWithGithub.url}</p>\\n  //     </>\\n  //   )\\n  // }\\n  return (\\n    <AutoComplete \\n      fetchSuggestions={handleFetch}\\n      onSelect={action('selected')}\\n      //renderOption={renderOption}\\n    />\\n  )\\n}\\n\\nstoriesOf('AutoComplete Component', module)\\n  .add('AutoComplete', SimpleComplete)\"; // @ts-ignore\n\nvar __LOCATIONS_MAP__ = {\n  \"autocomplete\": {\n    \"startLoc\": {\n      \"col\": 7,\n      \"line\": 64\n    },\n    \"endLoc\": {\n      \"col\": 37,\n      \"line\": 64\n    },\n    \"startBody\": {\n      \"col\": 23,\n      \"line\": 64\n    },\n    \"endBody\": {\n      \"col\": 37,\n      \"line\": 64\n    }\n  }\n};\nimport React from 'react';\nimport { storiesOf } from '@storybook/react';\nimport { action } from '@storybook/addon-actions';\nimport AutoComplete from './autoComplete';\n\nconst SimpleComplete = () => {\n  const lakers = ['bradley', 'pope', 'caruso', 'cook', 'cousins', 'james', 'AD', 'green', 'howard', 'kuzma', 'McGee', 'rando']; // const lakersWithNumber = [\n  //   {value: 'bradley', number: 11},\n  //   {value: 'pope', number: 1},\n  //   {value: 'caruso', number: 4},\n  //   {value: 'cook', number: 2},\n  //   {value: 'cousins', number: 15},\n  //   {value: 'james', number: 23},\n  //   {value: 'AD', number: 3},\n  //   {value: 'green', number: 14},\n  //   {value: 'howard', number: 39},\n  //   {value: 'kuzma', number: 0},\n  // ]\n  // const handleFetch = (query: string) => {\n  //   return lakers.filter(name => name.includes(query)).map(name => ({value: name}))\n  // }\n  // const handleFetch = (query: string) => {\n  //   return lakersWithNumber.filter(player => player.value.includes(query))\n  // }\n\n  const handleFetch = query => {\n    // return fetch(`https://api.github.com/search/users?q=${query}`)\n    //   .then(res => res.json())\n    //   .then(({ items }) => {\n    //     console.log(items)\n    //     return items.slice(0, 10).map((item: any) => ({ value: item.login, ...item}))\n    //   })\n    return lakers.filter(item => {\n      return item.includes(query);\n    });\n  }; // const renderOption = (item: DataSourceType) => {\n  //   const itemWithGithub = item as DataSourceType<GithubUserProps>\n  //   return (\n  //     <>\n  //       <h2>Name: {itemWithGithub.value}</h2>\n  //       <p>url: {itemWithGithub.url}</p>\n  //     </>\n  //   )\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(AutoComplete, {\n    fetchSuggestions: handleFetch,\n    onSelect: action('selected') //renderOption={renderOption}\n\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n\n_c = SimpleComplete;\nstoriesOf('AutoComplete Component', module).addParameters({\n  storySource: {\n    source: __STORY__,\n    locationsMap: __LOCATIONS_MAP__\n  }\n}).add('AutoComplete', SimpleComplete);\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleComplete\");","map":{"version":3,"sources":["/Users/licop/Documents/GitHub/LUI/src/components/AutoComplete/autoCompele.stories.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,MAAA,OAAA;AACA,SAAA,SAAA,QAAA,kBAAA;AACA,SAAA,MAAA,QAAA,0BAAA;AACA,OAAA,YAAA,MAAA,gBAAA;;AAUA,MAAA,cAAA,GAAA,MAAA;AACA,QAAA,MAAA,GAAA,CAAA,SAAA,EAAA,MAAA,EAAA,QAAA,EAAA,MAAA,EAAA,SAAA,EACA,OADA,EACA,IADA,EACA,OADA,EACA,QADA,EACA,OADA,EACA,OADA,EACA,OADA,CAAA,CADA,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAA,WAAA,GAAA,KAAA,IAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAA,MAAA,CAAA,MAAA,CAAA,IAAA,IAAA;AAAA,aAAA,IAAA,CAAA,QAAA,CAAA,KAAA,CAAA;AAAA,KAAA,CAAA;AACA,GARA,CArBA,CA+BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,sBACA,QAAA,YAAA;AACA,IAAA,gBAAA,EAAA,WADA;AAEA,IAAA,QAAA,EAAA,MAAA,CAAA,UAAA,CAFA,CAGA;;AAHA;AAAA;AAAA;AAAA;AAAA,UADA;AAOA,CA/CA;;KAAA,c;AAiDA,SAAA,CAAA,wBAAA,EAAA,MAAA,CAAA,CAAA,aAAA,CAAA;AAAA,EAAA,WAAA,EAAA;AAAA,IAAA,MAAA,EAAA,SAAA;AAAA,IAAA,YAAA,EAAA;AAAA;AAAA,CAAA,EACA,GADA,CACA,cADA,EACA,cADA","sourcesContent":["import React from 'react'\nimport { storiesOf } from '@storybook/react'\nimport { action } from '@storybook/addon-actions'\nimport AutoComplete from './autoComplete'\ninterface LakerPlayerProps {\n  value: string;\n  number: number;\n}\ninterface GithubUserProps {\n  login: string;\n  url: string;\n  avatar_url: string;\n}\nconst SimpleComplete = () => {\n  const lakers = ['bradley', 'pope', 'caruso', 'cook', 'cousins',\n  'james', 'AD', 'green', 'howard', 'kuzma', 'McGee', 'rando']\n  // const lakersWithNumber = [\n  //   {value: 'bradley', number: 11},\n  //   {value: 'pope', number: 1},\n  //   {value: 'caruso', number: 4},\n  //   {value: 'cook', number: 2},\n  //   {value: 'cousins', number: 15},\n  //   {value: 'james', number: 23},\n  //   {value: 'AD', number: 3},\n  //   {value: 'green', number: 14},\n  //   {value: 'howard', number: 39},\n  //   {value: 'kuzma', number: 0},\n  // ]\n  // const handleFetch = (query: string) => {\n  //   return lakers.filter(name => name.includes(query)).map(name => ({value: name}))\n  // }\n  // const handleFetch = (query: string) => {\n  //   return lakersWithNumber.filter(player => player.value.includes(query))\n  // }\n  const handleFetch = (query: string) => {\n    // return fetch(`https://api.github.com/search/users?q=${query}`)\n    //   .then(res => res.json())\n    //   .then(({ items }) => {\n    //     console.log(items)\n    //     return items.slice(0, 10).map((item: any) => ({ value: item.login, ...item}))\n    //   })\n    return lakers.filter(item => {return item.includes(query)});\n  }\n\n  // const renderOption = (item: DataSourceType) => {\n  //   const itemWithGithub = item as DataSourceType<GithubUserProps>\n  //   return (\n  //     <>\n  //       <h2>Name: {itemWithGithub.value}</h2>\n  //       <p>url: {itemWithGithub.url}</p>\n  //     </>\n  //   )\n  // }\n  return (\n    <AutoComplete \n      fetchSuggestions={handleFetch}\n      onSelect={action('selected')}\n      //renderOption={renderOption}\n    />\n  )\n}\n\nstoriesOf('AutoComplete Component', module)\n  .add('AutoComplete', SimpleComplete)"]},"metadata":{},"sourceType":"module"}