{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/licop/Documents/GitHub/LUI/src/components/AutoComplete/autoComplete.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport classNames from 'classnames';\nimport Input from '../Input/input';\nimport Icon from '../Icon/icon';\nimport useDebounce from '../../hooks/useDebounce';\n\nconst AutoComplete = props => {\n  _s();\n\n  const {\n    fetchSuggestions,\n    onSelect,\n    value,\n    renderOption,\n    ...restProps\n  } = props;\n  const [isLoading, setLoading] = useState(false);\n  const [inputValue, setInputValue] = useState(value);\n  const [suggestions, setSuggestions] = useState([]);\n  const [highlightIndex, setHighlightIndex] = useState(-1);\n  const debounceValue = useDebounce(inputValue, 500);\n  const triggerSearch = useRef(false);\n  const componentRef = useRef(null);\n\n  const handleSelect = item => {\n    setInputValue(item.value);\n    setSuggestions([]);\n\n    if (onSelect) {\n      onSelect(item);\n    }\n\n    triggerSearch.current = false;\n  };\n\n  useEffect(() => {\n    if (debounceValue && triggerSearch.current) {\n      const results = fetchSuggestions(debounceValue);\n\n      if (results instanceof Promise) {\n        setLoading(true);\n        results.then(data => {\n          setLoading(false);\n          setSuggestions(data);\n        });\n      } else {\n        setSuggestions(results);\n      }\n    } else {\n      setSuggestions([]);\n    }\n\n    setHighlightIndex(-1);\n  }, [debounceValue]);\n\n  const handleChange = e => {\n    const value = e.target.value.trim();\n    setInputValue(value);\n    triggerSearch.current = true;\n  };\n\n  const highlight = index => {\n    if (index < 0) index = 0;\n\n    if (index >= suggestions.length) {\n      index = suggestions.length - 1;\n    }\n\n    setHighlightIndex(index);\n  };\n\n  const handleKeyDown = e => {\n    switch (e.keyCode) {\n      case 13:\n        if (suggestions[highlightIndex]) {\n          handleSelect(suggestions[highlightIndex]);\n        }\n\n        break;\n\n      case 38:\n        highlight(highlightIndex - 1);\n        break;\n\n      case 40:\n        highlight(highlightIndex + 1);\n        break;\n\n      case 27:\n        setSuggestions([]);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const generateDropdown = () => {\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"lui-suggestion-list\",\n      children: suggestions.map((item, index) => {\n        const cnames = classNames('suggestion-item', {\n          'is-active': index === highlightIndex\n        });\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          className: cnames,\n          onClick: () => handleSelect(item),\n          children: renderTemplate(item)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 28\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this);\n  };\n\n  const renderTemplate = item => {\n    return renderOption ? renderOption(item) : item.value;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"lui-auto-complete\",\n    ref: componentRef,\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      value: inputValue,\n      onChange: handleChange,\n      onKeyDown: handleKeyDown,\n      ...restProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: /*#__PURE__*/_jsxDEV(Icon, {\n        icon: \"spinner\",\n        spin: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 17\n    }, this), suggestions.length > 0 && generateDropdown()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AutoComplete, \"ZiRWDalVQV109ebrw36VUdBKmIU=\", false, function () {\n  return [useDebounce];\n});\n\n_c = AutoComplete;\nexport default AutoComplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"AutoComplete\");","map":{"version":3,"sources":["/Users/licop/Documents/GitHub/LUI/src/components/AutoComplete/autoComplete.tsx"],"names":["React","useState","useEffect","useRef","classNames","Input","Icon","useDebounce","AutoComplete","props","fetchSuggestions","onSelect","value","renderOption","restProps","isLoading","setLoading","inputValue","setInputValue","suggestions","setSuggestions","highlightIndex","setHighlightIndex","debounceValue","triggerSearch","componentRef","handleSelect","item","current","results","Promise","then","data","handleChange","e","target","trim","highlight","index","length","handleKeyDown","keyCode","generateDropdown","map","cnames","renderTemplate"],"mappings":"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","sourcesContent":["import React, { FC, useState, ChangeEvent, KeyboardEvent, ReactElement, useEffect, useRef } from 'react';\nimport classNames from 'classnames';\nimport Input, { InputProps } from '../Input/input';\nimport Icon from '../Icon/icon';\nimport useDebounce from '../../hooks/useDebounce'\n\nimport Transition from '../Transition/transition';\nimport { render } from 'react-dom';\n\ninterface DataSourceObject {\n    value: string\n}\nexport type DataSourceType<T = {}> = T & DataSourceObject;\ninterface AutoCompleteProps extends Omit<InputProps, 'onSelect'> {\n    fetchSuggestions: (str: string) => DataSourceType[] | Promise<DataSourceType[]>,\n    onSelect?: (str: DataSourceType) => void,\n    renderOption?: (str: DataSourceType) => ReactElement | string\n}\n\nconst AutoComplete: FC<AutoCompleteProps> = (props) => {\n    const {\n        fetchSuggestions,\n        onSelect,\n        value,\n        renderOption,\n        ...restProps\n    } = props;\n    const [isLoading, setLoading] = useState(false)\n    const [inputValue,  setInputValue] = useState(value as string);\n    const [suggestions, setSuggestions] = useState<DataSourceType[]>([]);\n    const [highlightIndex, setHighlightIndex] = useState(-1)\n    const debounceValue = useDebounce(inputValue, 500);\n    const triggerSearch = useRef(false);\n    const componentRef = useRef<HTMLDivElement>(null);\n    \n    const handleSelect = (item: DataSourceType) => {\n        setInputValue(item.value)\n        setSuggestions([])\n        if (onSelect) {\n          onSelect(item)\n        }\n        triggerSearch.current = false;\n    }\n\n    useEffect(() => {\n        if(debounceValue && triggerSearch.current) {\n            const results = fetchSuggestions(debounceValue);\n            if(results instanceof Promise) {\n                setLoading(true);\n                results.then(data => {\n                    setLoading(false);\n                    setSuggestions(data);\n                })\n            } else {\n                setSuggestions(results);\n            }\n        } else {\n            setSuggestions([])\n        }\n        setHighlightIndex(-1);\n    }, [debounceValue])\n\n    const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n        const value = e.target.value.trim();\n        setInputValue(value);\n        triggerSearch.current = true;\n    }\n    \n    const highlight = (index: number) => {\n        if(index < 0) index = 0;\n        if(index >= suggestions.length) {\n            index = suggestions.length - 1;\n        }\n        setHighlightIndex(index);\n    }\n\n    const handleKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {\n        switch(e.keyCode) {\n            case 13: \n                if(suggestions[highlightIndex]) {\n                    handleSelect(suggestions[highlightIndex])\n                }\n                break;\n            case 38:\n                highlight(highlightIndex - 1)\n                break;\n            case 40: \n                highlight(highlightIndex + 1)\n                break;\n            case 27:\n                setSuggestions([]);\n                break;\n            default:\n                break;\n\n        }\n    }\n\n    const generateDropdown = () => {\n        return (\n            <ul className=\"lui-suggestion-list\">\n                {suggestions.map((item, index) => {\n                    const cnames = classNames('suggestion-item', {\n                        'is-active': index === highlightIndex\n                    })\n                    return <li key={index} className={cnames} onClick={() => handleSelect(item)}>\n                        {renderTemplate(item)}\n                    </li>\n                })}\n            </ul>\n        )\n    }\n\n    const renderTemplate = (item: any) => {\n        return renderOption ? renderOption(item) : item.value;\n    }\n\n    return (\n        <div className=\"lui-auto-complete\" ref={componentRef}>\n            <Input \n                value={inputValue}\n                onChange={handleChange}\n                onKeyDown={handleKeyDown}\n                {...restProps}\n            />\n            { isLoading &&\n                <ul><Icon icon=\"spinner\" spin/></ul>\n            }\n            {suggestions.length > 0 && generateDropdown()}\n        </div>\n    )\n}\n\nexport default AutoComplete;\n"]},"metadata":{},"sourceType":"module"}