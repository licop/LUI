{"ast":null,"code":"import _objectSpread from\"/Users/licop/Documents/GitHub/LUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";/* eslint-disable */ // @ts-nocheck\n// @ts-ignore\nvar __STORY__=\"import React from 'react'\\nimport { storiesOf } from '@storybook/react'\\nimport { action } from '@storybook/addon-actions'\\nimport AutoComplete, {DataSourceType} from './autoComplete'\\ninterface LakerPlayerProps {\\n  value: string;\\n  number: number;\\n}\\ninterface GithubUserProps {\\n  login: string;\\n  url: string;\\n  avatar_url: string;\\n}\\nconst SimpleComplete = () => {\\n  const lakers = ['bradley', 'pope', 'caruso', 'cook', 'cousins',\\n  'james', 'AD', 'green', 'howard', 'kuzma', 'McGee', 'rando']\\n  const lakersWithNumber = [\\n    {value: 'bradley', number: 11},\\n    {value: 'pope', number: 1},\\n    {value: 'caruso', number: 4},\\n    {value: 'cook', number: 2},\\n    {value: 'cousins', number: 15},\\n    {value: 'james', number: 23},\\n    {value: 'AD', number: 3},\\n    {value: 'green', number: 14},\\n    {value: 'howard', number: 39},\\n    {value: 'kuzma', number: 0},\\n  ]\\n  // const handleFetch = (query: string) => {\\n  //   return lakers.filter(name => name.includes(query)).map(name => ({value: name}))\\n  // }\\n  // const handleFetch = (query: string) => {\\n  //   return lakersWithNumber.filter(player => player.value.includes(query))\\n  // }\\n  const handleFetch = (query: string) => {\\n    return fetch(`https://api.github.com/search/users?q=${query}`)\\n      .then(res => res.json())\\n      .then(({ items }) => {\\n        console.log(items)\\n        return items.length > 0 && Array.isArray(items) ? items.slice(0, 10).map((item: any) => ({ value: item.login, ...item})) : []\\n      })\\n    // return lakersWithNumber.filter(item => {return item.value.includes(query)});\\n  }\\n    // const renderOption = (item: any) => {\\n    //     // return `${item.value}-${item.number}`;\\n    //     return (\\n    //         <>\\n    //             <h2>name: {item.value}</h2>\\n    //             {<p>number: {item.number}</p>}\\n    //         </>\\n    //     )\\n    // }\\n\\n  const renderOption = (item: DataSourceType) => {\\n    const itemWithGithub = item as DataSourceType<GithubUserProps>\\n    return (\\n      <>\\n        <p>Name: {itemWithGithub.value}</p>\\n        <p>url: {itemWithGithub.url}</p>\\n      </>\\n    )\\n  }\\n  return (\\n    <AutoComplete \\n      fetchSuggestions={handleFetch}\\n      onSelect={action('selected')}\\n      renderOption={renderOption}\\n    />\\n  )\\n}\\n\\nstoriesOf('AutoComplete Component', module)\\n  .add('AutoComplete', SimpleComplete)\";// @ts-ignore\nvar __LOCATIONS_MAP__={\"autocomplete\":{\"startLoc\":{\"col\":7,\"line\":73},\"endLoc\":{\"col\":37,\"line\":73},\"startBody\":{\"col\":23,\"line\":73},\"endBody\":{\"col\":37,\"line\":73}}};import React from'react';import{storiesOf}from'@storybook/react';import{action}from'@storybook/addon-actions';import AutoComplete from'./autoComplete';var SimpleComplete=function SimpleComplete(){var lakers=['bradley','pope','caruso','cook','cousins','james','AD','green','howard','kuzma','McGee','rando'];var lakersWithNumber=[{value:'bradley',number:11},{value:'pope',number:1},{value:'caruso',number:4},{value:'cook',number:2},{value:'cousins',number:15},{value:'james',number:23},{value:'AD',number:3},{value:'green',number:14},{value:'howard',number:39},{value:'kuzma',number:0}];// const handleFetch = (query: string) => {\n//   return lakers.filter(name => name.includes(query)).map(name => ({value: name}))\n// }\n// const handleFetch = (query: string) => {\n//   return lakersWithNumber.filter(player => player.value.includes(query))\n// }\nvar handleFetch=function handleFetch(query){return fetch(\"https://api.github.com/search/users?q=\".concat(query)).then(function(res){return res.json();}).then(function(_ref){var items=_ref.items;console.log(items);return items.length>0&&Array.isArray(items)?items.slice(0,10).map(function(item){return _objectSpread({value:item.login},item);}):[];});// return lakersWithNumber.filter(item => {return item.value.includes(query)});\n};// const renderOption = (item: any) => {\n//     // return `${item.value}-${item.number}`;\n//     return (\n//         <>\n//             <h2>name: {item.value}</h2>\n//             {<p>number: {item.number}</p>}\n//         </>\n//     )\n// }\nvar renderOption=function renderOption(item){var itemWithGithub=item;return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"p\",{children:[\"Name: \",itemWithGithub.value]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"url: \",itemWithGithub.url]})]});};return/*#__PURE__*/_jsx(AutoComplete,{fetchSuggestions:handleFetch,onSelect:action('selected'),renderOption:renderOption});};storiesOf('AutoComplete Component',module).addParameters({storySource:{source:__STORY__,locationsMap:__LOCATIONS_MAP__}}).add('AutoComplete',SimpleComplete);","map":{"version":3,"sources":["/Users/licop/Documents/GitHub/LUI/src/components/AutoComplete/autoCompele.stories.tsx"],"names":[],"mappings":";;;sKAAA,MAAA,CAAA,KAAA,KAAA,OAAA,CACA,OAAA,SAAA,KAAA,kBAAA,CACA,OAAA,MAAA,KAAA,0BAAA,CACA,MAAA,CAAA,YAAA,KAAA,gBAAA,CAUA,GAAA,CAAA,cAAA,CAAA,QAAA,CAAA,cAAA,EAAA,CACA,GAAA,CAAA,MAAA,CAAA,CAAA,SAAA,CAAA,MAAA,CAAA,QAAA,CAAA,MAAA,CAAA,SAAA,CACA,OADA,CACA,IADA,CACA,OADA,CACA,QADA,CACA,OADA,CACA,OADA,CACA,OADA,CAAA,CAEA,GAAA,CAAA,gBAAA,CAAA,CACA,CAAA,KAAA,CAAA,SAAA,CAAA,MAAA,CAAA,EAAA,CADA,CAEA,CAAA,KAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAFA,CAGA,CAAA,KAAA,CAAA,QAAA,CAAA,MAAA,CAAA,CAAA,CAHA,CAIA,CAAA,KAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAJA,CAKA,CAAA,KAAA,CAAA,SAAA,CAAA,MAAA,CAAA,EAAA,CALA,CAMA,CAAA,KAAA,CAAA,OAAA,CAAA,MAAA,CAAA,EAAA,CANA,CAOA,CAAA,KAAA,CAAA,IAAA,CAAA,MAAA,CAAA,CAAA,CAPA,CAQA,CAAA,KAAA,CAAA,OAAA,CAAA,MAAA,CAAA,EAAA,CARA,CASA,CAAA,KAAA,CAAA,QAAA,CAAA,MAAA,CAAA,EAAA,CATA,CAUA,CAAA,KAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAVA,CAAA,CAYA;AACA;AACA;AACA;AACA;AACA;AACA,GAAA,CAAA,WAAA,CAAA,QAAA,CAAA,WAAA,CAAA,KAAA,CAAA,CACA,MAAA,CAAA,KAAA,iDAAA,KAAA,EAAA,CACA,IADA,CACA,SAAA,GAAA,QAAA,CAAA,GAAA,CAAA,IAAA,EAAA,EADA,EAEA,IAFA,CAEA,cAAA,IAAA,CAAA,KAAA,MAAA,KAAA,CACA,OAAA,CAAA,GAAA,CAAA,KAAA,EACA,MAAA,CAAA,KAAA,CAAA,MAAA,CAAA,CAAA,EAAA,KAAA,CAAA,OAAA,CAAA,KAAA,CAAA,CAAA,KAAA,CAAA,KAAA,CAAA,CAAA,CAAA,EAAA,EAAA,GAAA,CAAA,SAAA,IAAA,wBAAA,KAAA,CAAA,IAAA,CAAA,KAAA,EAAA,IAAA,GAAA,CAAA,CAAA,EAAA,CACA,CALA,CAAA,CAMA;AACA,CARA,CASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,GAAA,CAAA,YAAA,CAAA,QAAA,CAAA,YAAA,CAAA,IAAA,CAAA,CACA,GAAA,CAAA,cAAA,CAAA,IAAA,CACA,mBACA,wCACA,8BAAA,cAAA,CAAA,KAAA,GADA,cAEA,6BAAA,cAAA,CAAA,GAAA,GAFA,GADA,CAMA,CARA,CASA,mBACA,KAAA,YAAA,EACA,gBAAA,CAAA,WADA,CAEA,QAAA,CAAA,MAAA,CAAA,UAAA,CAFA,CAGA,YAAA,CAAA,YAHA,EADA,CAOA,CAxDA,CA0DA,SAAA,CAAA,wBAAA,CAAA,MAAA,CAAA,CAAA,aAAA,CAAA,CAAA,WAAA,CAAA,CAAA,MAAA,CAAA,SAAA,CAAA,YAAA,CAAA,iBAAA,CAAA,CAAA,EACA,GADA,CACA,cADA,CACA,cADA","sourcesContent":["import React from 'react'\nimport { storiesOf } from '@storybook/react'\nimport { action } from '@storybook/addon-actions'\nimport AutoComplete, {DataSourceType} from './autoComplete'\ninterface LakerPlayerProps {\n  value: string;\n  number: number;\n}\ninterface GithubUserProps {\n  login: string;\n  url: string;\n  avatar_url: string;\n}\nconst SimpleComplete = () => {\n  const lakers = ['bradley', 'pope', 'caruso', 'cook', 'cousins',\n  'james', 'AD', 'green', 'howard', 'kuzma', 'McGee', 'rando']\n  const lakersWithNumber = [\n    {value: 'bradley', number: 11},\n    {value: 'pope', number: 1},\n    {value: 'caruso', number: 4},\n    {value: 'cook', number: 2},\n    {value: 'cousins', number: 15},\n    {value: 'james', number: 23},\n    {value: 'AD', number: 3},\n    {value: 'green', number: 14},\n    {value: 'howard', number: 39},\n    {value: 'kuzma', number: 0},\n  ]\n  // const handleFetch = (query: string) => {\n  //   return lakers.filter(name => name.includes(query)).map(name => ({value: name}))\n  // }\n  // const handleFetch = (query: string) => {\n  //   return lakersWithNumber.filter(player => player.value.includes(query))\n  // }\n  const handleFetch = (query: string) => {\n    return fetch(`https://api.github.com/search/users?q=${query}`)\n      .then(res => res.json())\n      .then(({ items }) => {\n        console.log(items)\n        return items.length > 0 && Array.isArray(items) ? items.slice(0, 10).map((item: any) => ({ value: item.login, ...item})) : []\n      })\n    // return lakersWithNumber.filter(item => {return item.value.includes(query)});\n  }\n    // const renderOption = (item: any) => {\n    //     // return `${item.value}-${item.number}`;\n    //     return (\n    //         <>\n    //             <h2>name: {item.value}</h2>\n    //             {<p>number: {item.number}</p>}\n    //         </>\n    //     )\n    // }\n\n  const renderOption = (item: DataSourceType) => {\n    const itemWithGithub = item as DataSourceType<GithubUserProps>\n    return (\n      <>\n        <p>Name: {itemWithGithub.value}</p>\n        <p>url: {itemWithGithub.url}</p>\n      </>\n    )\n  }\n  return (\n    <AutoComplete \n      fetchSuggestions={handleFetch}\n      onSelect={action('selected')}\n      renderOption={renderOption}\n    />\n  )\n}\n\nstoriesOf('AutoComplete Component', module)\n  .add('AutoComplete', SimpleComplete)"]},"metadata":{},"sourceType":"module"}