{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/licop/Documents/GitHub/LUI/src/components/AutoComplete/autoComplete.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport Input from '../Input/input';\nimport Icon from '../Icon/icon';\nimport useDebounce from '../../hooks/useDebounce';\n\nconst AutoComplete = props => {\n  _s();\n\n  const {\n    fetchSuggestions,\n    onSelect,\n    value,\n    renderOption,\n    ...restProps\n  } = props;\n  const [isLoading, setLoading] = useState(false);\n  const [inputValue, setInputValue] = useState(value);\n  const [suggestions, setSuggestions] = useState([]);\n  const [highlightIndex, setHighlightIndex] = useState(-1);\n  const debounceValue = useDebounce(inputValue, 500);\n\n  const handleSelect = item => {\n    setInputValue(item.value);\n    setSuggestions([]);\n\n    if (onSelect) {\n      onSelect(item);\n    }\n  };\n\n  useEffect(() => {\n    if (debounceValue) {\n      const results = fetchSuggestions(debounceValue);\n\n      if (results instanceof Promise) {\n        setLoading(true);\n        results.then(data => {\n          setLoading(false);\n          setSuggestions(data);\n        });\n      } else {\n        setSuggestions(results);\n      }\n    } else {\n      setSuggestions([]);\n    }\n  }, [debounceValue]);\n\n  const handleChange = e => {\n    const value = e.target.value.trim();\n    setInputValue(value);\n  };\n\n  const highlight = index => {\n    if (index < 0) index = 0;\n\n    if (index >= suggestions.length) {\n      index = suggestions.length - 1;\n    }\n\n    setHighlightIndex(index);\n  };\n\n  const handleKeyDown = e => {\n    switch (e.keyCode) {\n      case 13:\n        break;\n\n      case 38:\n        highlight(highlightIndex - 1);\n        break;\n\n      case 40:\n        highlight(highlightIndex + 1);\n        break;\n\n      case 27:\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const generateDropdown = () => {\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"suggestion-list\",\n      children: suggestions.map((item, index) => {\n        const cnames = classNames('suggestion-item', {\n          'is-active': index === highlightIndex\n        });\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          className: cnames,\n          onClick: () => handleSelect(item),\n          children: renderTemplate(item)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 28\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this);\n  };\n\n  const renderTemplate = item => {\n    return renderOption ? renderOption(item) : item.value;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"lui-auto-complete\",\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      value: inputValue,\n      onChange: handleChange,\n      onKeyDown: handleKeyDown,\n      ...restProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: /*#__PURE__*/_jsxDEV(Icon, {\n        icon: \"spinner\",\n        spin: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 17\n    }, this), suggestions.length > 0 && generateDropdown()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AutoComplete, \"SMq/M7kohSIO/5cpvyxySrhOeTQ=\", false, function () {\n  return [useDebounce];\n});\n\n_c = AutoComplete;\nexport default AutoComplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"AutoComplete\");","map":{"version":3,"sources":["/Users/licop/Documents/GitHub/LUI/src/components/AutoComplete/autoComplete.tsx"],"names":["React","useState","useEffect","classNames","Input","Icon","useDebounce","AutoComplete","props","fetchSuggestions","onSelect","value","renderOption","restProps","isLoading","setLoading","inputValue","setInputValue","suggestions","setSuggestions","highlightIndex","setHighlightIndex","debounceValue","handleSelect","item","results","Promise","then","data","handleChange","e","target","trim","highlight","index","length","handleKeyDown","keyCode","generateDropdown","map","cnames","renderTemplate"],"mappings":"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","sourcesContent":["import React, { FC, useState, ChangeEvent, KeyboardEvent, ReactElement, useEffect, useRef } from 'react';\nimport classNames from 'classnames';\nimport Input, { InputProps } from '../Input/input';\nimport Icon from '../Icon/icon';\nimport useDebounce from '../../hooks/useDebounce'\n\nimport Transition from '../Transition/transition';\nimport { render } from 'react-dom';\n\ninterface DataSourceObject {\n    value: string\n}\nexport type DataSourceType<T = {}> = T & DataSourceObject;\ninterface AutoCompleteProps extends Omit<InputProps, 'onSelect'> {\n    fetchSuggestions: (str: string) => DataSourceType[] | Promise<DataSourceType[]>,\n    onSelect?: (str: DataSourceType) => void,\n    renderOption?: (str: DataSourceType) => ReactElement | string\n}\n\nconst AutoComplete: FC<AutoCompleteProps> = (props) => {\n    const {\n        fetchSuggestions,\n        onSelect,\n        value,\n        renderOption,\n        ...restProps\n    } = props;\n    const [isLoading, setLoading] = useState(false)\n    const [inputValue,  setInputValue] = useState(value as string);\n    const [suggestions, setSuggestions] = useState<DataSourceType[]>([]);\n    const [highlightIndex, setHighlightIndex] = useState(-1)\n    const debounceValue = useDebounce(inputValue, 500);\n    const handleSelect = (item: DataSourceType) => {\n        setInputValue(item.value)\n        setSuggestions([])\n        if (onSelect) {\n          onSelect(item)\n        }\n    }\n\n    useEffect(() => {\n        if(debounceValue) {\n            const results = fetchSuggestions(debounceValue);\n            if(results instanceof Promise) {\n                setLoading(true);\n                results.then(data => {\n                    setLoading(false);\n                    setSuggestions(data);\n                })\n            } else {\n                setSuggestions(results);\n            }\n        } else {\n            setSuggestions([])\n        }\n    }, [debounceValue])\n\n    const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n        const value = e.target.value.trim();\n        setInputValue(value);\n    }\n    \n    const highlight = (index: number) => {\n        if(index < 0) index = 0;\n        if(index >= suggestions.length) {\n            index = suggestions.length - 1;\n        }\n        setHighlightIndex(index);\n    }\n\n    const handleKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {\n        switch(e.keyCode) {\n            case 13: \n                break;\n            case 38:\n                highlight(highlightIndex - 1)\n                break;\n            case 40: \n                highlight(highlightIndex + 1)\n                break;\n            case 27:\n                break;\n            default:\n                break;\n\n        }\n    }\n\n    const generateDropdown = () => {\n        return (\n            <ul className=\"suggestion-list\">\n                {suggestions.map((item, index) => {\n                    const cnames = classNames('suggestion-item', {\n                        'is-active': index === highlightIndex\n                    })\n                    return <li key={index} className={cnames} onClick={() => handleSelect(item)}>\n                        {renderTemplate(item)}\n                    </li>\n                })}\n            </ul>\n        )\n    }\n    const renderTemplate = (item: any) => {\n        return renderOption ? renderOption(item) : item.value;\n    }\n    return (\n        <div className=\"lui-auto-complete\">\n            <Input \n                value={inputValue}\n                onChange={handleChange}\n                onKeyDown={handleKeyDown}\n                {...restProps}\n            />\n            { isLoading &&\n                <ul><Icon icon=\"spinner\" spin/></ul>\n            }\n            {suggestions.length > 0 && generateDropdown()}\n        </div>\n    )\n}\n\nexport default AutoComplete;\n"]},"metadata":{},"sourceType":"module"}