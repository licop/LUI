{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/licop/Documents/GitHub/LUI/src/components/AutoComplete/autoComplete.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Input from '../Input/input';\n\nconst AutoComplete = props => {\n  _s();\n\n  const {\n    fetchSuggestions,\n    onSelect,\n    value,\n    renderOption,\n    ...restProps\n  } = props;\n  const [inputValue, setInputValue] = useState(value);\n  const [suggestions, setSuggestions] = useState([]);\n\n  const handleSelect = item => {\n    setInputValue(item.value);\n    setSuggestions([]);\n\n    if (onSelect) {\n      onSelect(item);\n    }\n  };\n\n  const handleChange = e => {\n    const value = e.target.value.trim();\n    setInputValue(value);\n\n    if (value) {\n      const results = fetchSuggestions(value);\n      setSuggestions(results);\n    } else {\n      setSuggestions([]);\n    }\n  };\n\n  const generateDropdown = () => {\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: suggestions.map((item, index) => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => handleSelect(item),\n          children: renderTemplate(item)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 28\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this);\n  };\n\n  const renderTemplate = item => {\n    return renderOption ? renderOption(item) : item.value;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"lui-auto-complete\",\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      value: inputValue,\n      onChange: handleChange,\n      ...restProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), suggestions.length > 0 && generateDropdown()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AutoComplete, \"4KecnkVgmXRrK+QwwFIxyULcv5g=\");\n\n_c = AutoComplete;\nexport default AutoComplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"AutoComplete\");","map":{"version":3,"sources":["/Users/licop/Documents/GitHub/LUI/src/components/AutoComplete/autoComplete.tsx"],"names":["React","useState","Input","AutoComplete","props","fetchSuggestions","onSelect","value","renderOption","restProps","inputValue","setInputValue","suggestions","setSuggestions","handleSelect","item","handleChange","e","target","trim","results","generateDropdown","map","index","renderTemplate","length"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAoBC,QAApB,QAAiG,OAAjG;AAEA,OAAOC,KAAP,MAAkC,gBAAlC;;AAeA,MAAMC,YAAmC,GAAIC,KAAD,IAAW;AAAA;;AACnD,QAAM;AACFC,IAAAA,gBADE;AAEFC,IAAAA,QAFE;AAGFC,IAAAA,KAHE;AAIFC,IAAAA,YAJE;AAKF,OAAGC;AALD,MAMFL,KANJ;AAQA,QAAM,CAACM,UAAD,EAAcC,aAAd,IAA+BV,QAAQ,CAACM,KAAD,CAA7C;AACA,QAAM,CAACK,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,CAAmB,EAAnB,CAA9C;;AACA,QAAMa,YAAY,GAAIC,IAAD,IAA0B;AAC3CJ,IAAAA,aAAa,CAACI,IAAI,CAACR,KAAN,CAAb;AACAM,IAAAA,cAAc,CAAC,EAAD,CAAd;;AACA,QAAIP,QAAJ,EAAc;AACZA,MAAAA,QAAQ,CAACS,IAAD,CAAR;AACD;AACF,GANH;;AAOA,QAAMC,YAAY,GAAIC,CAAD,IAAsC;AACvD,UAAMV,KAAK,GAAGU,CAAC,CAACC,MAAF,CAASX,KAAT,CAAeY,IAAf,EAAd;AACAR,IAAAA,aAAa,CAACJ,KAAD,CAAb;;AACA,QAAGA,KAAH,EAAU;AACN,YAAMa,OAAO,GAAGf,gBAAgB,CAACE,KAAD,CAAhC;AACAM,MAAAA,cAAc,CAACO,OAAD,CAAd;AACH,KAHD,MAGO;AACHP,MAAAA,cAAc,CAAC,EAAD,CAAd;AACH;AACJ,GATD;;AAUA,QAAMQ,gBAAgB,GAAG,MAAM;AAC3B,wBACI;AAAA,gBACKT,WAAW,CAACU,GAAZ,CAAgB,CAACP,IAAD,EAAOQ,KAAP,KAAiB;AAC9B,4BAAO;AAAgB,UAAA,OAAO,EAAE,MAAMT,YAAY,CAACC,IAAD,CAA3C;AAAA,oBACFS,cAAc,CAACT,IAAD;AADZ,WAASQ,KAAT;AAAA;AAAA;AAAA;AAAA,gBAAP;AAGH,OAJA;AADL;AAAA;AAAA;AAAA;AAAA,YADJ;AASH,GAVD;;AAWA,QAAMC,cAAc,GAAIT,IAAD,IAAe;AAClC,WAAOP,YAAY,GAAGA,YAAY,CAACO,IAAD,CAAf,GAAwBA,IAAI,CAACR,KAAhD;AACH,GAFD;;AAGA,sBACI;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAA,4BACI,QAAC,KAAD;AACI,MAAA,KAAK,EAAEG,UADX;AAEI,MAAA,QAAQ,EAAEM,YAFd;AAAA,SAGQP;AAHR;AAAA;AAAA;AAAA;AAAA,YADJ,EAMKG,WAAW,CAACa,MAAZ,GAAqB,CAArB,IAA0BJ,gBAAgB,EAN/C;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH,CApDD;;GAAMlB,Y;;KAAAA,Y;AAsDN,eAAeA,YAAf","sourcesContent":["import React, { FC, useState, ChangeEvent, KeyboardEvent, ReactElement, useEffect, useRef } from 'react'\nimport classNames from 'classnames'\nimport Input, { InputProps } from '../Input/input'\nimport Icon from '../Icon/icon'\nimport Transition from '../Transition/transition'\nimport { render } from 'react-dom'\n\ninterface DataSourceObject {\n    value: string\n}\nexport type DataSourceType<T = {}> = T & DataSourceObject;\ninterface AutoCompleteProps extends Omit<InputProps, 'onSelect'> {\n    fetchSuggestions: (str: string) => DataSourceType[],\n    onSelect?: (str: DataSourceType) => void,\n    renderOption?: (str: DataSourceType) => ReactElement \n}\n\nconst AutoComplete: FC<AutoCompleteProps> = (props) => {\n    const {\n        fetchSuggestions,\n        onSelect,\n        value,\n        renderOption,\n        ...restProps\n    } = props;\n\n    const [inputValue,  setInputValue] = useState(value);\n    const [suggestions, setSuggestions] = useState<DataSourceType[]>([]); \n    const handleSelect = (item: DataSourceType) => {\n        setInputValue(item.value)\n        setSuggestions([])\n        if (onSelect) {\n          onSelect(item)\n        }\n      }\n    const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n        const value = e.target.value.trim();\n        setInputValue(value);\n        if(value) {\n            const results = fetchSuggestions(value);\n            setSuggestions(results);\n        } else {\n            setSuggestions([])\n        }\n    }\n    const generateDropdown = () => {\n        return (\n            <ul>\n                {suggestions.map((item, index) => {\n                    return <li key={index} onClick={() => handleSelect(item)}>\n                        {renderTemplate(item)}\n                    </li>\n                })}\n            </ul>\n        )\n    }\n    const renderTemplate = (item: any) => {\n        return renderOption ? renderOption(item) : item.value;\n    }\n    return (\n        <div className=\"lui-auto-complete\">\n            <Input \n                value={inputValue}\n                onChange={handleChange}\n                {...restProps}\n            />\n            {suggestions.length > 0 && generateDropdown()}\n        </div>\n    )\n}\n\nexport default AutoComplete;\n\n\n\n"]},"metadata":{},"sourceType":"module"}