{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/licop/Documents/GitHub/LUI/src/components/AutoComplete/AutoCompele.stories.tsx\";\n\n/* eslint-disable */\n// @ts-nocheck\n// @ts-ignore\nvar __STORY__ = \"import React from 'react';\\nimport { storiesOf } from '@storybook/react';\\nimport { action } from '@storybook/addon-actions';\\nimport { Story, Meta } from '@storybook/react/types-6-0';\\n\\nimport AutoComplete, {DataSourceType, AutoCompleteProps} from './AutoComplete';\\n\\n\\nexport default {\\n  title: 'Components/AutoComplete',\\n  component: AutoComplete,\\n} as Meta;\\n\\ninterface GithubUserProps {\\n  login: string;\\n  url: string;\\n  avatar_url: string;\\n}\\n\\n\\nexport const SimpleComplete: React.VFC<{}> = () => {\\n  // const lakers = ['bradley', 'pope', 'caruso', 'cook', 'cousins',\\n  // 'james', 'AD', 'green', 'howard', 'kuzma', 'McGee', 'rando']\\n  // const lakersWithNumber = [\\n  //   {value: 'bradley', number: 11},\\n  //   {value: 'pope', number: 1},\\n  //   {value: 'caruso', number: 4},\\n  //   {value: 'cook', number: 2},\\n  //   {value: 'cousins', number: 15},\\n  //   {value: 'james', number: 23},\\n  //   {value: 'AD', number: 3},\\n  //   {value: 'green', number: 14},\\n  //   {value: 'howard', number: 39},\\n  //   {value: 'kuzma', number: 0}\\n  // ]\\n  // const handleFetch = (query: string) => {\\n  //   return lakers.filter(name => name.includes(query)).map(name => ({value: name}))\\n  // }\\n  // const handleFetch = (query: string) => {\\n  //   return lakersWithNumber.filter(player => player.value.includes(query))\\n  // }\\n  const handleFetch = (query: string) => {\\n    return fetch(`https://api.github.com/search/users?q=${query}`)\\n      .then(res => res.json())\\n      .then(({ items }) => {\\n        console.log(items)\\n        return items.length > 0 && Array.isArray(items) ? items.slice(0, 10).map((item: any) => ({ value: item.login, ...item})) : []\\n      })\\n  }\\n\\n  const renderOption = (item: DataSourceType) => {\\n    const itemWithGithub = item as DataSourceType<GithubUserProps>\\n    return (\\n      <>\\n        <p>Name: {itemWithGithub.value}</p>\\n        <p>url: {itemWithGithub.url}</p>\\n      </>\\n    )\\n  }\\n  return (\\n    <AutoComplete \\n      fetchSuggestions={handleFetch}\\n      onSelect={action('selected')}\\n      renderOption={renderOption}\\n    />\\n  )\\n}\\n\"; // @ts-ignore\n\nvar __LOCATIONS_MAP__ = {\n  \"SimpleComplete\": {\n    \"startLoc\": {\n      \"col\": 45,\n      \"line\": 21\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 67\n    },\n    \"startBody\": {\n      \"col\": 45,\n      \"line\": 21\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 67\n    }\n  }\n};\nimport React from 'react';\nimport { action } from '@storybook/addon-actions';\nimport AutoComplete from './AutoComplete';\nexport default {\n  title: 'Components/AutoComplete',\n  component: AutoComplete\n};\nexport const SimpleComplete = () => {\n  // const lakers = ['bradley', 'pope', 'caruso', 'cook', 'cousins',\n  // 'james', 'AD', 'green', 'howard', 'kuzma', 'McGee', 'rando']\n  // const lakersWithNumber = [\n  //   {value: 'bradley', number: 11},\n  //   {value: 'pope', number: 1},\n  //   {value: 'caruso', number: 4},\n  //   {value: 'cook', number: 2},\n  //   {value: 'cousins', number: 15},\n  //   {value: 'james', number: 23},\n  //   {value: 'AD', number: 3},\n  //   {value: 'green', number: 14},\n  //   {value: 'howard', number: 39},\n  //   {value: 'kuzma', number: 0}\n  // ]\n  // const handleFetch = (query: string) => {\n  //   return lakers.filter(name => name.includes(query)).map(name => ({value: name}))\n  // }\n  // const handleFetch = (query: string) => {\n  //   return lakersWithNumber.filter(player => player.value.includes(query))\n  // }\n  const handleFetch = query => {\n    return fetch(`https://api.github.com/search/users?q=${query}`).then(res => res.json()).then(({\n      items\n    }) => {\n      console.log(items);\n      return items.length > 0 && Array.isArray(items) ? items.slice(0, 10).map(item => ({\n        value: item.login,\n        ...item\n      })) : [];\n    });\n  };\n\n  const renderOption = item => {\n    const itemWithGithub = item;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Name: \", itemWithGithub.value]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"url: \", itemWithGithub.url]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(AutoComplete, {\n    fetchSuggestions: handleFetch,\n    onSelect: action('selected'),\n    renderOption: renderOption\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_c = SimpleComplete;\nSimpleComplete.parameters = {\n  storySource: {\n    source: \"() => {\\n  // const lakers = ['bradley', 'pope', 'caruso', 'cook', 'cousins',\\n  // 'james', 'AD', 'green', 'howard', 'kuzma', 'McGee', 'rando']\\n  // const lakersWithNumber = [\\n  //   {value: 'bradley', number: 11},\\n  //   {value: 'pope', number: 1},\\n  //   {value: 'caruso', number: 4},\\n  //   {value: 'cook', number: 2},\\n  //   {value: 'cousins', number: 15},\\n  //   {value: 'james', number: 23},\\n  //   {value: 'AD', number: 3},\\n  //   {value: 'green', number: 14},\\n  //   {value: 'howard', number: 39},\\n  //   {value: 'kuzma', number: 0}\\n  // ]\\n  // const handleFetch = (query: string) => {\\n  //   return lakers.filter(name => name.includes(query)).map(name => ({value: name}))\\n  // }\\n  // const handleFetch = (query: string) => {\\n  //   return lakersWithNumber.filter(player => player.value.includes(query))\\n  // }\\n  const handleFetch = (query: string) => {\\n    return fetch(`https://api.github.com/search/users?q=${query}`)\\n      .then(res => res.json())\\n      .then(({ items }) => {\\n        console.log(items)\\n        return items.length > 0 && Array.isArray(items) ? items.slice(0, 10).map((item: any) => ({ value: item.login, ...item})) : []\\n      })\\n  }\\n\\n  const renderOption = (item: DataSourceType) => {\\n    const itemWithGithub = item as DataSourceType<GithubUserProps>\\n    return (\\n      <>\\n        <p>Name: {itemWithGithub.value}</p>\\n        <p>url: {itemWithGithub.url}</p>\\n      </>\\n    )\\n  }\\n  return (\\n    <AutoComplete \\n      fetchSuggestions={handleFetch}\\n      onSelect={action('selected')}\\n      renderOption={renderOption}\\n    />\\n  )\\n}\"\n  },\n  ...SimpleComplete.parameters\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleComplete\");","map":{"version":3,"sources":["/Users/licop/Documents/GitHub/LUI/src/components/AutoComplete/AutoCompele.stories.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,MAAA,OAAA;AAEA,SAAA,MAAA,QAAA,0BAAA;AAGA,OAAA,YAAA,MAAA,gBAAA;AAGA,eAAA;AACA,EAAA,KAAA,EAAA,yBADA;AAEA,EAAA,SAAA,EAAA;AAFA,CAAA;AAYA,OAAA,MAAA,cAAA,GAAA,MAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAA,WAAA,GAAA,KAAA,IAAA;AACA,WAAA,KAAA,CAAA,yCAAA,KAAA,EAAA,CAAA,CACA,IADA,CACA,GAAA,IAAA,GAAA,CAAA,IAAA,EADA,EAEA,IAFA,CAEA,CAAA;AAAA,MAAA;AAAA,KAAA,KAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,KAAA;AACA,aAAA,KAAA,CAAA,MAAA,GAAA,CAAA,IAAA,KAAA,CAAA,OAAA,CAAA,KAAA,CAAA,GAAA,KAAA,CAAA,KAAA,CAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,IAAA,KAAA;AAAA,QAAA,KAAA,EAAA,IAAA,CAAA,KAAA;AAAA,WAAA;AAAA,OAAA,CAAA,CAAA,GAAA,EAAA;AACA,KALA,CAAA;AAMA,GAPA;;AASA,QAAA,YAAA,GAAA,IAAA,IAAA;AACA,UAAA,cAAA,GAAA,IAAA;AACA,wBACA;AAAA,8BACA;AAAA,6BAAA,cAAA,CAAA,KAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,eAEA;AAAA,4BAAA,cAAA,CAAA,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFA;AAAA,oBADA;AAMA,GARA;;AASA,sBACA,QAAA,YAAA;AACA,IAAA,gBAAA,EAAA,WADA;AAEA,IAAA,QAAA,EAAA,MAAA,CAAA,UAAA,CAFA;AAGA,IAAA,YAAA,EAAA;AAHA;AAAA;AAAA;AAAA;AAAA,UADA;AAOA,CA9CA;KAAA,c;AAiDA,cAAA,CAAA,UAAA,GAAA;AAAA,EAAA,WAAA,EAAA;AAAA,IAAA,MAAA,EAAA;AAAA,GAAA;AAAA,KAAA,cAAA,CAAA;AAAA,CAAA","sourcesContent":["import React from 'react';\nimport { storiesOf } from '@storybook/react';\nimport { action } from '@storybook/addon-actions';\nimport { Story, Meta } from '@storybook/react/types-6-0';\n\nimport AutoComplete, {DataSourceType, AutoCompleteProps} from './AutoComplete';\n\n\nexport default {\n  title: 'Components/AutoComplete',\n  component: AutoComplete,\n} as Meta;\n\ninterface GithubUserProps {\n  login: string;\n  url: string;\n  avatar_url: string;\n}\n\n\nexport const SimpleComplete: React.VFC<{}> = () => {\n  // const lakers = ['bradley', 'pope', 'caruso', 'cook', 'cousins',\n  // 'james', 'AD', 'green', 'howard', 'kuzma', 'McGee', 'rando']\n  // const lakersWithNumber = [\n  //   {value: 'bradley', number: 11},\n  //   {value: 'pope', number: 1},\n  //   {value: 'caruso', number: 4},\n  //   {value: 'cook', number: 2},\n  //   {value: 'cousins', number: 15},\n  //   {value: 'james', number: 23},\n  //   {value: 'AD', number: 3},\n  //   {value: 'green', number: 14},\n  //   {value: 'howard', number: 39},\n  //   {value: 'kuzma', number: 0}\n  // ]\n  // const handleFetch = (query: string) => {\n  //   return lakers.filter(name => name.includes(query)).map(name => ({value: name}))\n  // }\n  // const handleFetch = (query: string) => {\n  //   return lakersWithNumber.filter(player => player.value.includes(query))\n  // }\n  const handleFetch = (query: string) => {\n    return fetch(`https://api.github.com/search/users?q=${query}`)\n      .then(res => res.json())\n      .then(({ items }) => {\n        console.log(items)\n        return items.length > 0 && Array.isArray(items) ? items.slice(0, 10).map((item: any) => ({ value: item.login, ...item})) : []\n      })\n  }\n\n  const renderOption = (item: DataSourceType) => {\n    const itemWithGithub = item as DataSourceType<GithubUserProps>\n    return (\n      <>\n        <p>Name: {itemWithGithub.value}</p>\n        <p>url: {itemWithGithub.url}</p>\n      </>\n    )\n  }\n  return (\n    <AutoComplete \n      fetchSuggestions={handleFetch}\n      onSelect={action('selected')}\n      renderOption={renderOption}\n    />\n  )\n}\n"]},"metadata":{},"sourceType":"module"}